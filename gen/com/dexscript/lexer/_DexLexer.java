/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.dexscript.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.dexscript.psi.DexTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_DexLexer.flex</tt>
 */
public class _DexLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\5\1\22\0\1\1\1\14\3\0\1\25\1\20\1\0\1\6\1\7\1\23\1\15\1\12\1\16\1\27"+
    "\1\24\12\0\1\10\1\11\1\22\1\13\1\26\2\0\1\67\3\0\1\63\6\0\1\31\1\70\1\30\1"+
    "\65\2\0\1\66\1\0\1\62\1\64\5\0\1\4\1\0\1\5\1\21\1\41\1\0\1\37\1\55\1\46\1"+
    "\50\1\35\1\51\1\45\1\56\1\43\1\0\1\47\1\57\1\52\1\44\1\53\1\34\1\0\1\36\1"+
    "\42\1\32\1\54\1\61\1\40\1\60\1\33\1\0\1\2\1\17\1\3\7\0\1\1\32\0\1\1\337\0"+
    "\1\1\177\0\13\1\35\0\2\1\5\0\1\1\57\0\1\1\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\24\1\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\0\1\51\1\52\1\53\1\54\1\55"+
    "\14\0\1\56\1\0\1\57\21\0\1\60\1\61\1\0"+
    "\1\62\1\63\11\0\1\64\11\0\1\65\2\0\1\66"+
    "\1\67\1\0\1\70\1\71\4\0\1\72\1\0\1\73"+
    "\1\0\1\74\11\0\1\75\1\76\2\0\1\77\1\100"+
    "\4\0\1\101\22\0\1\102\1\0\1\103\3\0\1\104"+
    "\1\105\1\0\1\106\1\107\1\110\2\0\1\111\1\0"+
    "\1\112\1\113\1\114\1\115\2\0\1\116\5\0\1\117"+
    "\2\0\1\120\5\0\1\121\2\0\1\122\4\0\1\123"+
    "\1\124\1\0\1\125\2\0\1\126\3\0\1\127\1\130"+
    "\2\0\1\131\3\0\1\132";

  private static int [] zzUnpackAction() {
    int [] result = new int[242];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\71\0\71\0\71\0\71\0\71"+
    "\0\71\0\253\0\71\0\71\0\344\0\u011d\0\u0156\0\u018f"+
    "\0\u01c8\0\u0201\0\u023a\0\u0273\0\u02ac\0\u02e5\0\u031e\0\u0357"+
    "\0\u0390\0\u03c9\0\u0402\0\u043b\0\u0474\0\u04ad\0\u04e6\0\u051f"+
    "\0\u0558\0\u0591\0\u05ca\0\u0603\0\u063c\0\u0675\0\u06ae\0\u06e7"+
    "\0\u0720\0\u0759\0\u0792\0\u07cb\0\u0804\0\71\0\71\0\71"+
    "\0\71\0\71\0\71\0\71\0\71\0\71\0\71\0\71"+
    "\0\u083d\0\71\0\71\0\71\0\u0876\0\u08af\0\71\0\71"+
    "\0\71\0\71\0\u08e8\0\u0921\0\u095a\0\u0993\0\u09cc\0\u0a05"+
    "\0\u0a3e\0\u0a77\0\u0ab0\0\u0ae9\0\u0b22\0\u0b5b\0\u0b94\0\71"+
    "\0\u0bcd\0\u0c06\0\u0c3f\0\u0c78\0\u0cb1\0\u0cea\0\u0d23\0\u0d5c"+
    "\0\u0d95\0\u0dce\0\u0e07\0\u0e40\0\u0e79\0\u0eb2\0\u0eeb\0\u0f24"+
    "\0\u0f5d\0\u0f96\0\u0fcf\0\71\0\71\0\u1008\0\71\0\71"+
    "\0\u1041\0\u107a\0\u10b3\0\u10ec\0\u1125\0\u115e\0\u1197\0\u11d0"+
    "\0\u1209\0\u1242\0\u127b\0\u12b4\0\u12ed\0\u1326\0\u135f\0\u1398"+
    "\0\u13d1\0\u140a\0\u1443\0\71\0\u147c\0\u14b5\0\71\0\71"+
    "\0\u14ee\0\71\0\71\0\u1527\0\u1560\0\u1599\0\u15d2\0\71"+
    "\0\u160b\0\71\0\u1644\0\71\0\u167d\0\u16b6\0\u16ef\0\u1728"+
    "\0\u1761\0\u179a\0\u17d3\0\u180c\0\u1845\0\71\0\71\0\u187e"+
    "\0\u18b7\0\71\0\71\0\u18f0\0\u1929\0\u1962\0\u199b\0\u19d4"+
    "\0\u1a0d\0\u1a46\0\u1a7f\0\u1ab8\0\u1af1\0\u1b2a\0\u1b63\0\u1b9c"+
    "\0\u1bd5\0\u1c0e\0\u1c47\0\u1c80\0\u1cb9\0\u1cf2\0\u1d2b\0\u1d64"+
    "\0\u1d9d\0\u1dd6\0\71\0\u1e0f\0\71\0\u1e48\0\u1e81\0\u1eba"+
    "\0\u1ef3\0\71\0\u1f2c\0\71\0\71\0\71\0\u1f65\0\u1f9e"+
    "\0\71\0\u1fd7\0\71\0\71\0\71\0\71\0\u2010\0\u2049"+
    "\0\71\0\u2082\0\u20bb\0\u20f4\0\u212d\0\u2166\0\71\0\u219f"+
    "\0\u21d8\0\71\0\u2211\0\u224a\0\u2283\0\u22bc\0\u22f5\0\71"+
    "\0\u232e\0\u2367\0\71\0\u23a0\0\u23d9\0\u2412\0\u244b\0\71"+
    "\0\71\0\u2484\0\71\0\u24bd\0\u24f6\0\71\0\u252f\0\u2568"+
    "\0\u25a1\0\71\0\71\0\u25da\0\u2613\0\71\0\u264c\0\u2685"+
    "\0\u26be\0\71";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[242];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\2\1\32\1\33\1\2\1\34\1\35\1\36\3\2"+
    "\1\37\1\40\1\2\1\41\1\42\1\2\1\43\1\44"+
    "\1\45\1\46\1\2\1\47\1\50\2\2\1\51\2\2"+
    "\1\52\1\2\1\53\1\54\1\55\72\0\1\3\102\0"+
    "\1\56\70\0\1\57\70\0\1\60\70\0\1\61\1\0"+
    "\1\62\66\0\1\63\2\0\1\64\65\0\1\65\3\0"+
    "\1\66\64\0\1\67\4\0\1\70\1\71\62\0\1\72"+
    "\70\0\1\73\2\0\1\74\3\0\1\75\5\0\1\76"+
    "\53\0\1\77\70\0\1\100\70\0\1\101\70\0\1\102"+
    "\12\0\1\103\71\0\1\104\104\0\1\105\60\0\1\106"+
    "\74\0\1\107\110\0\1\110\46\0\1\111\1\0\1\112"+
    "\63\0\1\113\2\0\1\114\2\0\1\115\74\0\1\116"+
    "\3\0\1\117\1\120\1\121\71\0\1\122\54\0\1\123"+
    "\13\0\1\124\2\0\1\125\47\0\1\126\72\0\1\127"+
    "\13\0\1\130\1\131\2\0\1\132\50\0\1\133\77\0"+
    "\1\134\60\0\1\135\67\0\1\136\72\0\1\137\75\0"+
    "\1\140\61\0\1\141\103\0\1\142\74\0\1\143\27\0"+
    "\1\144\70\0\1\145\106\0\1\146\52\0\1\147\104\0"+
    "\1\150\73\0\1\151\72\0\1\152\102\0\1\153\64\0"+
    "\1\154\60\0\1\155\76\0\1\156\66\0\1\157\111\0"+
    "\1\160\54\0\1\161\57\0\1\162\73\0\1\163\67\0"+
    "\1\164\66\0\1\165\100\0\1\166\72\0\1\167\63\0"+
    "\1\170\77\0\1\171\2\0\1\172\76\0\1\173\47\0"+
    "\1\174\76\0\1\175\77\0\1\176\51\0\1\177\66\0"+
    "\1\200\73\0\1\201\113\0\1\202\46\0\1\203\71\0"+
    "\1\204\110\0\1\205\61\0\1\206\77\0\1\207\37\0"+
    "\1\210\77\0\1\211\70\0\1\212\102\0\1\213\56\0"+
    "\1\214\107\0\1\215\55\0\1\216\72\0\1\217\10\0"+
    "\1\220\51\0\1\221\65\0\1\222\73\0\1\223\77\0"+
    "\1\224\77\0\1\225\70\0\1\226\52\0\1\227\65\0"+
    "\1\230\7\0\1\231\64\0\1\232\5\0\1\233\67\0"+
    "\1\234\62\0\1\235\1\0\1\236\110\0\1\237\57\0"+
    "\1\240\61\0\1\241\70\0\1\242\67\0\1\243\117\0"+
    "\1\244\70\0\1\245\70\0\1\246\41\0\1\247\71\0"+
    "\1\250\67\0\1\251\74\0\1\252\72\0\1\253\72\0"+
    "\1\254\70\0\1\255\70\0\1\256\60\0\1\257\64\0"+
    "\1\260\74\0\1\261\75\0\1\262\57\0\1\263\110\0"+
    "\1\264\54\0\1\265\106\0\1\266\46\0\1\267\70\0"+
    "\1\270\70\0\1\271\105\0\1\272\54\0\1\273\71\0"+
    "\1\274\70\0\1\275\70\0\1\276\73\0\1\277\76\0"+
    "\1\300\67\0\1\301\56\0\1\302\103\0\1\303\55\0"+
    "\1\304\70\0\1\305\114\0\1\306\63\0\1\307\62\0"+
    "\1\310\57\0\1\311\102\0\1\312\63\0\1\313\110\0"+
    "\1\314\67\0\1\315\55\0\1\316\70\0\1\317\112\0"+
    "\1\320\62\0\1\321\46\0\1\322\71\0\1\323\71\0"+
    "\1\324\102\0\1\325\73\0\1\326\73\0\1\327\43\0"+
    "\1\330\74\0\1\331\105\0\1\332\51\0\1\333\116\0"+
    "\1\334\51\0\1\335\73\0\1\336\65\0\1\337\62\0"+
    "\1\340\76\0\1\341\100\0\1\342\61\0\1\343\57\0"+
    "\1\344\101\0\1\345\61\0\1\346\70\0\1\347\107\0"+
    "\1\350\50\0\1\351\101\0\1\352\61\0\1\353\77\0"+
    "\1\354\60\0\1\355\111\0\1\356\75\0\1\357\65\0"+
    "\1\360\44\0\1\361\72\0\1\362\32\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9975];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\6\11\1\1\2\11\41\1\13\11"+
    "\1\1\3\11\1\1\1\0\4\11\1\1\14\0\1\11"+
    "\1\0\1\1\21\0\2\11\1\0\2\11\11\0\1\1"+
    "\11\0\1\11\2\0\2\11\1\0\2\11\4\0\1\11"+
    "\1\0\1\11\1\0\1\11\11\0\2\11\2\0\2\11"+
    "\4\0\1\1\22\0\1\11\1\0\1\11\3\0\1\1"+
    "\1\11\1\0\3\11\2\0\1\11\1\0\4\11\2\0"+
    "\1\11\5\0\1\11\2\0\1\11\5\0\1\11\2\0"+
    "\1\11\4\0\2\11\1\0\1\11\2\0\1\11\3\0"+
    "\2\11\2\0\1\11\3\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[242];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _DexLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _DexLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 91: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 92: break;
          case 3: 
            { return LBRACE;
            } 
            // fall through
          case 93: break;
          case 4: 
            { return RBRACE;
            } 
            // fall through
          case 94: break;
          case 5: 
            { return LBRACK;
            } 
            // fall through
          case 95: break;
          case 6: 
            { return RBRACK;
            } 
            // fall through
          case 96: break;
          case 7: 
            { return LPAREN;
            } 
            // fall through
          case 97: break;
          case 8: 
            { return RPAREN;
            } 
            // fall through
          case 98: break;
          case 9: 
            { return COLON;
            } 
            // fall through
          case 99: break;
          case 10: 
            { return SEMICOLON;
            } 
            // fall through
          case 100: break;
          case 11: 
            { return COMMA;
            } 
            // fall through
          case 101: break;
          case 12: 
            { return ASSIGN;
            } 
            // fall through
          case 102: break;
          case 13: 
            { return NOT;
            } 
            // fall through
          case 103: break;
          case 14: 
            { return PLUS;
            } 
            // fall through
          case 104: break;
          case 15: 
            { return MINUS;
            } 
            // fall through
          case 105: break;
          case 16: 
            { return BIT_OR;
            } 
            // fall through
          case 106: break;
          case 17: 
            { return BIT_AND;
            } 
            // fall through
          case 107: break;
          case 18: 
            { return BIT_XOR;
            } 
            // fall through
          case 108: break;
          case 19: 
            { return LESS;
            } 
            // fall through
          case 109: break;
          case 20: 
            { return MUL;
            } 
            // fall through
          case 110: break;
          case 21: 
            { return QUOTIENT;
            } 
            // fall through
          case 111: break;
          case 22: 
            { return REMAINDER;
            } 
            // fall through
          case 112: break;
          case 23: 
            { return GREATER;
            } 
            // fall through
          case 113: break;
          case 24: 
            { return DOT;
            } 
            // fall through
          case 114: break;
          case 25: 
            { return VAR_ASSIGN;
            } 
            // fall through
          case 115: break;
          case 26: 
            { return EQ;
            } 
            // fall through
          case 116: break;
          case 27: 
            { return NOT_EQ;
            } 
            // fall through
          case 117: break;
          case 28: 
            { return PLUS_ASSIGN;
            } 
            // fall through
          case 118: break;
          case 29: 
            { return PLUS_PLUS;
            } 
            // fall through
          case 119: break;
          case 30: 
            { return MINUS_ASSIGN;
            } 
            // fall through
          case 120: break;
          case 31: 
            { return MINUS_MINUS;
            } 
            // fall through
          case 121: break;
          case 32: 
            { return BIT_OR_ASSIGN;
            } 
            // fall through
          case 122: break;
          case 33: 
            { return COND_OR;
            } 
            // fall through
          case 123: break;
          case 34: 
            { return BIT_AND_ASSIGN;
            } 
            // fall through
          case 124: break;
          case 35: 
            { return COND_AND;
            } 
            // fall through
          case 125: break;
          case 36: 
            { return BIT_CLEAR;
            } 
            // fall through
          case 126: break;
          case 37: 
            { return BIT_XOR_ASSIGN;
            } 
            // fall through
          case 127: break;
          case 38: 
            { return LESS_OR_EQUAL;
            } 
            // fall through
          case 128: break;
          case 39: 
            { return SEND_CHANNEL;
            } 
            // fall through
          case 129: break;
          case 40: 
            { return SHIFT_LEFT;
            } 
            // fall through
          case 130: break;
          case 41: 
            { return MUL_ASSIGN;
            } 
            // fall through
          case 131: break;
          case 42: 
            { return QUOTIENT_ASSIGN;
            } 
            // fall through
          case 132: break;
          case 43: 
            { return REMAINDER_ASSIGN;
            } 
            // fall through
          case 133: break;
          case 44: 
            { return GREATER_OR_EQUAL;
            } 
            // fall through
          case 134: break;
          case 45: 
            { return SHIFT_RIGHT;
            } 
            // fall through
          case 135: break;
          case 46: 
            { return IF;
            } 
            // fall through
          case 136: break;
          case 47: 
            { return GO;
            } 
            // fall through
          case 137: break;
          case 48: 
            { return BIT_CLEAR_ASSIGN;
            } 
            // fall through
          case 138: break;
          case 49: 
            { return SHIFT_LEFT_ASSIGN;
            } 
            // fall through
          case 139: break;
          case 50: 
            { return SHIFT_RIGHT_ASSIGN;
            } 
            // fall through
          case 140: break;
          case 51: 
            { return TRIPLE_DOT;
            } 
            // fall through
          case 141: break;
          case 52: 
            { return INT;
            } 
            // fall through
          case 142: break;
          case 53: 
            { return FOR;
            } 
            // fall through
          case 143: break;
          case 54: 
            { return MAP;
            } 
            // fall through
          case 144: break;
          case 55: 
            { return OCT;
            } 
            // fall through
          case 145: break;
          case 56: 
            { return HEX;
            } 
            // fall through
          case 146: break;
          case 57: 
            { return VAR;
            } 
            // fall through
          case 147: break;
          case 58: 
            { return SEMICOLON_SYNTHETIC;
            } 
            // fall through
          case 148: break;
          case 59: 
            { return TYPE_;
            } 
            // fall through
          case 149: break;
          case 60: 
            { return ELSE;
            } 
            // fall through
          case 150: break;
          case 61: 
            { return GOTO;
            } 
            // fall through
          case 151: break;
          case 62: 
            { return CASE;
            } 
            // fall through
          case 152: break;
          case 63: 
            { return CHAR;
            } 
            // fall through
          case 153: break;
          case 64: 
            { return CHAN;
            } 
            // fall through
          case 154: break;
          case 65: 
            { return FUNC;
            } 
            // fall through
          case 155: break;
          case 66: 
            { return CONST;
            } 
            // fall through
          case 156: break;
          case 67: 
            { return DEFER;
            } 
            // fall through
          case 157: break;
          case 68: 
            { return FLOAT;
            } 
            // fall through
          case 158: break;
          case 69: 
            { return BREAK;
            } 
            // fall through
          case 159: break;
          case 70: 
            { return RELOP;
            } 
            // fall through
          case 160: break;
          case 71: 
            { return ADDOP;
            } 
            // fall through
          case 161: break;
          case 72: 
            { return MULOP;
            } 
            // fall through
          case 162: break;
          case 73: 
            { return RETURN;
            } 
            // fall through
          case 163: break;
          case 74: 
            { return STRING;
            } 
            // fall through
          case 164: break;
          case 75: 
            { return STRUCT;
            } 
            // fall through
          case 165: break;
          case 76: 
            { return SELECT;
            } 
            // fall through
          case 166: break;
          case 77: 
            { return SWITCH;
            } 
            // fall through
          case 167: break;
          case 78: 
            { return IMPORT;
            } 
            // fall through
          case 168: break;
          case 79: 
            { return FLOATI;
            } 
            // fall through
          case 169: break;
          case 80: 
            { return PACKAGE;
            } 
            // fall through
          case 170: break;
          case 81: 
            { return DEFAULT;
            } 
            // fall through
          case 171: break;
          case 82: 
            { return UNARYOP;
            } 
            // fall through
          case 172: break;
          case 83: 
            { return CONTINUE;
            } 
            // fall through
          case 173: break;
          case 84: 
            { return DECIMALI;
            } 
            // fall through
          case 174: break;
          case 85: 
            { return FUNCTION;
            } 
            // fall through
          case 175: break;
          case 86: 
            { return INTERFACE;
            } 
            // fall through
          case 176: break;
          case 87: 
            { return RAW_STRING;
            } 
            // fall through
          case 177: break;
          case 88: 
            { return IDENTIFIER;
            } 
            // fall through
          case 178: break;
          case 89: 
            { return FALLTHROUGH;
            } 
            // fall through
          case 179: break;
          case 90: 
            { return LITERALTYPEEXPR;
            } 
            // fall through
          case 180: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
